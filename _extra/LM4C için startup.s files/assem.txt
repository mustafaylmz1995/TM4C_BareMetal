; <<< Use Configuration Wizard in Context Menu >>>
;******************************************************************************
;
; Startup.s - Startup code for Stellaris.
;
; Copyright (c) 2011 Texas Instruments Incorporated.  All rights reserved.
; Software License Agreement
; 
; Texas Instruments (TI) is supplying this software for use solely and
; exclusively on TI's microcontroller products. The software is owned by
; TI and/or its suppliers, and is protected under applicable copyright
; laws. You may not combine this software with "viral" open-source
; software in order to form a larger program.
; 
; THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
; DAMAGES, FOR ANY REASON WHATSOEVER.
; 
; This is part of revision 7860 of the Stellaris Peripheral Driver Library.
;
;******************************************************************************

;******************************************************************************
;
; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;
;******************************************************************************
Stack_Size  EQU     0x00000200

;******************************************************************************
;
; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
;
;******************************************************************************
Heap_Size    EQU     0x00000000

;******************************************************************************
;
; Allocate space for the stack.
;
;******************************************************************************
        AREA    STACK, NOINIT, READWRITE, ALIGN=3
Stack_Mem
        SPACE   Stack_Size
__initial_sp

;******************************************************************************
;
; Allocate space for the heap.
;
;******************************************************************************
        AREA    HEAP, NOINIT, READWRITE, ALIGN=3
__heap_base
Heap_Mem
        SPACE   Heap_Size
__heap_limit

;******************************************************************************
;
; Indicate that the code in this file preserves 8-byte alignment of the stack.
;
;******************************************************************************
        PRESERVE8

;******************************************************************************
;
; Place code into the reset code section.
;
;******************************************************************************
        AREA    RESET, DATA, READONLY
        THUMB

;******************************************************************************
;
; The vector table.
;
;******************************************************************************
        EXPORT  __Vectors
        EXPORT  __Vectors_End
        EXPORT  __Vectors_Size

__Vectors
        DCD     __initial_sp              ; Top of Stack
        DCD     Reset_Handler             ; Reset Handler
;        DCD     NMI_Handler               ; NMI Handler
;        DCD     HardFault_Handler         ; Hard Fault Handler
;        DCD     MemManage_Handler         ; MPU Fault Handler
;        DCD     BusFault_Handler          ; Bus Fault Handler
;        DCD     UsageFault_Handler        ; Usage Fault Handler
;        DCD     0                         ; Reserved
;        DCD     0                         ; Reserved
;        DCD     0                         ; Reserved
;        DCD     0                         ; Reserved
;        DCD     SVC_Handler               ; SVCall Handler
;        DCD     DebugMon_Handler          ; Debug Monitor Handler
;        DCD     0                         ; Reserved
;        DCD     PendSV_Handler            ; PendSV Handler
;        DCD     SysTick_Handler           ; SysTick Handler

;        ; External Interrupts

;        DCD     GPIOA_Handler             ;   0: GPIO Port A
;        DCD     GPIOB_Handler             ;   1: GPIO Port B
;        DCD     GPIOC_Handler             ;   2: GPIO Port C
;        DCD     GPIOD_Handler             ;   3: GPIO Port D
;        DCD     GPIOE_Handler             ;   4: GPIO Port E
;        DCD     UART0_Handler             ;   5: UART0 Rx and Tx
;        DCD     UART1_Handler             ;   6: UART1 Rx and Tx
;        DCD     SSI0_Handler              ;   7: SSI0 Rx and Tx
;        DCD     I2C0_Handler              ;   8: I2C0 Master and Slave
;        DCD     PMW0_FAULT_Handler        ;   9: PWM Fault
;        DCD     PWM0_0_Handler            ;  10: PWM Generator 0
;        DCD     PWM0_1_Handler            ;  11: PWM Generator 1
;        DCD     PWM0_2_Handler            ;  12: PWM Generator 2
;        DCD     QEI0_Handler              ;  13: Quadrature Encoder 0
;        DCD     ADC0SS0_Handler           ;  14: ADC Sequence 0
;        DCD     ADC0SS1_Handler           ;  15: ADC Sequence 1
;        DCD     ADC0SS2_Handler           ;  16: ADC Sequence 2
;        DCD     ADC0SS3_Handler           ;  17: ADC Sequence 3
;        DCD     WDT0_Handler              ;  18: Watchdog timer
;        DCD     TIMER0A_Handler           ;  19: Timer 0 subtimer A
;        DCD     TIMER0B_Handler           ;  20: Timer 0 subtimer B
;        DCD     TIMER1A_Handler           ;  21: Timer 1 subtimer A
;        DCD     TIMER1B_Handler           ;  22: Timer 1 subtimer B
;        DCD     TIMER2A_Handler           ;  23: Timer 2 subtimer A
;        DCD     TIMER2B_Handler           ;  24: Timer 2 subtimer B
;        DCD     COMP0_Handler             ;  25: Analog Comparator 0
;        DCD     COMP1_Handler             ;  26: Analog Comparator 1
;        DCD     COMP2_Handler             ;  27: Analog Comparator 2
;        DCD     SYSCTL_Handler            ;  28: System Control (PLL, OSC, BO)
;        DCD     FLASH_Handler             ;  29: FLASH Control
;        DCD     GPIOF_Handler             ;  30: GPIO Port F
;        DCD     GPIOG_Handler             ;  31: GPIO Port G
;        DCD     GPIOH_Handler             ;  32: GPIO Port H
;        DCD     UART2_Handler             ;  33: UART2 Rx and Tx
;        DCD     SSI1_Handler              ;  34: SSI1 Rx and Tx
;        DCD     TIMER3A_Handler           ;  35: Timer 3 subtimer A
;        DCD     TIMER3B_Handler           ;  36: Timer 3 subtimer B
		DCD     NmiSR                       ; NMI Handler
        DCD     FaultISR                    ; Hard Fault Handler
        DCD     IntDefaultHandler           ; MPU Fault Handler
        DCD     IntDefaultHandler           ; Bus Fault Handler
        DCD     IntDefaultHandler           ; Usage Fault Handler
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     IntDefaultHandler           ; SVCall handler
        DCD     IntDefaultHandler           ; Debug monitor handler
        DCD     0                           ; Reserved
        DCD     IntDefaultHandler           ; PendSV Handler
        DCD     IntDefaultHandler           ; SysTick Handler
        DCD     IntDefaultHandler           ; GPIO Port A
        DCD     IntDefaultHandler           ; GPIO Port B
        DCD     IntDefaultHandler           ; GPIO Port C
        DCD     IntDefaultHandler           ; GPIO Port D
        DCD     IntDefaultHandler           ; GPIO Port E
        DCD     IntDefaultHandler           ; UART0 Rx and Tx
        DCD     IntDefaultHandler           ; UART1 Rx and Tx
        DCD     IntDefaultHandler           ; SSI0 Rx and Tx
        DCD     IntDefaultHandler           ; I2C0 Master and Slave
        DCD     IntDefaultHandler           ; PWM Fault
        DCD     IntDefaultHandler           ; PWM Generator 0
        DCD     IntDefaultHandler           ; PWM Generator 1
        DCD     IntDefaultHandler           ; PWM Generator 2
        DCD     IntDefaultHandler           ; Quadrature Encoder 0
        DCD     IntDefaultHandler           ; ADC Sequence 0
        DCD     IntDefaultHandler           ; ADC Sequence 1
        DCD     IntDefaultHandler           ; ADC Sequence 2
        DCD     IntDefaultHandler           ; ADC Sequence 3
        DCD     IntDefaultHandler           ; Watchdog timer
        DCD     IntDefaultHandler           ; Timer 0 subtimer A
        DCD     IntDefaultHandler           ; Timer 0 subtimer B
        DCD     IntDefaultHandler           ; Timer 1 subtimer A
        DCD     IntDefaultHandler           ; Timer 1 subtimer B
        DCD     IntDefaultHandler           ; Timer 2 subtimer A
        DCD     IntDefaultHandler           ; Timer 2 subtimer B
        DCD     IntDefaultHandler           ; Analog Comparator 0
        DCD     IntDefaultHandler           ; Analog Comparator 1
        DCD     IntDefaultHandler           ; Analog Comparator 2
        DCD     IntDefaultHandler           ; System Control (PLL, OSC, BO)
        DCD     IntDefaultHandler           ; FLASH Control
        DCD     IntDefaultHandler           ; GPIO Port F
        DCD     IntDefaultHandler           ; GPIO Port G
        DCD     IntDefaultHandler           ; GPIO Port H
        DCD     IntDefaultHandler           ; UART2 Rx and Tx
        DCD     IntDefaultHandler           ; SSI1 Rx and Tx
        DCD     IntDefaultHandler           ; Timer 3 subtimer A
        DCD     IntDefaultHandler           ; Timer 3 subtimer B
        DCD     IntDefaultHandler           ; I2C1 Master and Slave
        DCD     IntDefaultHandler           ; Quadrature Encoder 1
        DCD     IntDefaultHandler           ; CAN0
        DCD     IntDefaultHandler           ; CAN1
        DCD     IntDefaultHandler           ; CAN2
        DCD     IntDefaultHandler           ; Ethernet
        DCD     IntDefaultHandler           ; Hibernate
        DCD     IntDefaultHandler           ; USB0
        DCD     IntDefaultHandler           ; PWM Generator 3
        DCD     IntDefaultHandler           ; uDMA Software Transfer
        DCD     IntDefaultHandler           ; uDMA Error
        DCD     IntDefaultHandler           ; ADC1 Sequence 0
        DCD     IntDefaultHandler           ; ADC1 Sequence 1
        DCD     IntDefaultHandler           ; ADC1 Sequence 2
        DCD     IntDefaultHandler           ; ADC1 Sequence 3
        DCD     IntDefaultHandler           ; I2S0
        DCD     IntDefaultHandler           ; External Bus Interface 0
        DCD     IntDefaultHandler           ; GPIO Port J
        DCD     IntDefaultHandler           ; GPIO Port K
        DCD     IntDefaultHandler           ; GPIO Port L
        DCD     IntDefaultHandler           ; SSI2 Rx and Tx
        DCD     IntDefaultHandler           ; SSI3 Rx and Tx
        DCD     IntDefaultHandler           ; UART3 Rx and Tx
        DCD     IntDefaultHandler           ; UART4 Rx and Tx
        DCD     IntDefaultHandler           ; UART5 Rx and Tx
        DCD     IntDefaultHandler           ; UART6 Rx and Tx
        DCD     IntDefaultHandler           ; UART7 Rx and Tx
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     IntDefaultHandler           ; I2C2 Master and Slave
        DCD     IntDefaultHandler           ; I2C3 Master and Slave
        DCD     IntDefaultHandler           ; Timer 4 subtimer A
        DCD     IntDefaultHandler           ; Timer 4 subtimer B
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     0                           ; Reserved
        DCD     IntDefaultHandler           ; Timer 5 subtimer A
        DCD     IntDefaultHandler           ; Timer 5 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 0 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 0 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 1 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 1 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 2 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 2 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 3 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 3 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 4 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 4 subtimer B
        DCD     IntDefaultHandler           ; Wide Timer 5 subtimer A
        DCD     IntDefaultHandler           ; Wide Timer 5 subtimer B
        DCD     IntDefaultHandler           ; FPU
        DCD     IntDefaultHandler           ; PECI 0
        DCD     IntDefaultHandler           ; LPC 0
        DCD     IntDefaultHandler           ; I2C4 Master and Slave
        DCD     IntDefaultHandler           ; I2C5 Master and Slave
        DCD     IntDefaultHandler           ; GPIO Port M
        DCD     IntDefaultHandler           ; GPIO Port N
        DCD     IntDefaultHandler           ; Quadrature Encoder 2
        DCD     IntDefaultHandler           ; Fan 0
        DCD     0                           ; Reserved
        DCD     IntDefaultHandler           ; GPIO Port P (Summary or P0)
        DCD     IntDefaultHandler           ; GPIO Port P1
        DCD     IntDefaultHandler           ; GPIO Port P2
        DCD     IntDefaultHandler           ; GPIO Port P3
        DCD     IntDefaultHandler           ; GPIO Port P4
        DCD     IntDefaultHandler           ; GPIO Port P5
        DCD     IntDefaultHandler           ; GPIO Port P6
        DCD     IntDefaultHandler           ; GPIO Port P7
        DCD     IntDefaultHandler           ; GPIO Port Q (Summary or Q0)
        DCD     IntDefaultHandler           ; GPIO Port Q1
        DCD     IntDefaultHandler           ; GPIO Port Q2
        DCD     IntDefaultHandler           ; GPIO Port Q3
        DCD     IntDefaultHandler           ; GPIO Port Q4
        DCD     IntDefaultHandler           ; GPIO Port Q5
        DCD     IntDefaultHandler           ; GPIO Port Q6
        DCD     IntDefaultHandler           ; GPIO Port Q7
        DCD     IntDefaultHandler           ; GPIO Port R
        DCD     IntDefaultHandler           ; GPIO Port S
        DCD     IntDefaultHandler           ; PWM 1 Generator 0
        DCD     IntDefaultHandler           ; PWM 1 Generator 1
        DCD     IntDefaultHandler           ; PWM 1 Generator 2
        DCD     IntDefaultHandler           ; PWM 1 Generator 3
        DCD     IntDefaultHandler           ; PWM 1 Fault

__Vectors_End

__Vectors_Size  EQU     __Vectors_End - __Vectors

                AREA    |.text|, CODE, READONLY
;******************************************************************************
;
; This is the code that gets called when the processor first starts execution
; following a reset event.
;
;******************************************************************************

;Alttakini ekledim!!!!!!!!!!!!!!!!!!!!
__SYSTEM_CLOCK	EQU	0x00F42400	;16Mhz



		EXPORT  Reset_Handler
Reset_Handler
        ;
        ; Call the C library enty point that handles startup.  This will copy
        ; the .data section initializers from flash to SRAM and zero fill the
        ; .bss section.
        ;
        

;        IF      {CPU} = "Cortex-M4.fp"
;        LDR     R0, =0xE000ED88           ; Enable CP10,CP11
;        LDR     R1,[R0]
;        ORR     R1,R1,#(0xF << 20)
;        STR     R1,[R0]
;        ENDIF
		
		IMPORT  __main
;	EKLEDIM!!!!!!!!!!!!!!!!
;
		LDR     R0, =__main
		BX      R0
;	Alttakini Yorum yaptim!!!!!!!!!!!!!!!!!!
;        B       __main



;        Reset_Handler   PROC
;                        EXPORT  Reset_Handler             [WEAK]
;                        IMPORT  SystemInit
;                        IMPORT  __main
;                        LDR     R0, =SystemInit
;                        BLX     R0
;                        LDR     R0, =__main
;                        BX      R0
;                        ENDP
;        
;        
;        ; Dummy Exception Handlers (infinite loops which can be modified)
;        
;        NMI_Handler     PROC
;                        EXPORT  NMI_Handler               [WEAK]
;                        B       .
;                        ENDP
;        HardFault_Handler
;                        PROC
;                        EXPORT  HardFault_Handler         [WEAK]
;                        B       .
;                        ENDP
;        MemManage_Handler
;                        PROC
;                        EXPORT  MemManage_Handler         [WEAK]
;                        B       .
;                        ENDP
;        BusFault_Handler
;                        PROC
;                        EXPORT  BusFault_Handler          [WEAK]
;                        B       .
;                        ENDP
;        UsageFault_Handler
;                        PROC
;                        EXPORT  UsageFault_Handler        [WEAK]
;                        B       .
;                        ENDP
;        SVC_Handler     PROC
;                        EXPORT  SVC_Handler               [WEAK]
;                        B       .
;                        ENDP
;        DebugMon_Handler
;                        PROC
;                        EXPORT  DebugMon_Handler          [WEAK]
;                        B       .
;                        ENDP
;        PendSV_Handler
;                        PROC
;                        EXPORT  PendSV_Handler            [WEAK]
;                        B       .
;                        ENDP
;        SysTick_Handler
;                        PROC
;                        EXPORT  SysTick_Handler           [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOA_Handler
;                        PROC
;                        EXPORT  GPIOA_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOB_Handler
;                        PROC
;                        EXPORT  GPIOB_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOC_Handler
;                        PROC
;                        EXPORT  GPIOC_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOD_Handler
;                        PROC
;                        EXPORT  GPIOD_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOE_Handler
;                        PROC
;                        EXPORT  GPIOE_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        UART0_Handler
;                        PROC
;                        EXPORT  UART0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        UART1_Handler
;                        PROC
;                        EXPORT  UART1_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        SSI0_Handler
;                        PROC
;                        EXPORT  SSI0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        I2C0_Handler
;                        PROC
;                        EXPORT  I2C0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        PMW0_FAULT_Handler
;                        PROC
;                        EXPORT  PMW0_FAULT_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        PWM0_0_Handler
;                        PROC
;                        EXPORT  PWM0_0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        PWM0_1_Handler
;                        PROC
;                        EXPORT  PWM0_1_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        PWM0_2_Handler
;                        PROC
;                        EXPORT  PWM0_2_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        QEI0_Handler
;                        PROC
;                        EXPORT  QEI0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        ADC0SS0_Handler
;                        PROC
;                        EXPORT  ADC0SS0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        ADC0SS1_Handler
;                        PROC
;                        EXPORT  ADC0SS1_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        ADC0SS2_Handler
;                        PROC
;                        EXPORT  ADC0SS2_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        ADC0SS3_Handler
;                        PROC
;                        EXPORT  ADC0SS3_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        WDT0_Handler
;                        PROC
;                        EXPORT  WDT0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER0A_Handler
;                        PROC
;                        EXPORT  TIMER0A_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER0B_Handler
;                        PROC
;                        EXPORT  TIMER0B_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER1A_Handler
;                        PROC
;                        EXPORT  TIMER1A_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER1B_Handler
;                        PROC
;                        EXPORT  TIMER1B_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER2A_Handler
;                        PROC
;                        EXPORT  TIMER2A_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER2B_Handler
;                        PROC
;                        EXPORT  TIMER2B_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        COMP0_Handler
;                        PROC
;                        EXPORT  COMP0_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        COMP1_Handler
;                        PROC
;                        EXPORT  COMP1_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        COMP2_Handler
;                        PROC
;                        EXPORT  COMP2_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        SYSCTL_Handler
;                        PROC
;                        EXPORT  SYSCTL_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        FLASH_Handler
;                        PROC
;                        EXPORT  FLASH_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOF_Handler
;                        PROC
;                        EXPORT  GPIOF_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOG_Handler
;                        PROC
;                        EXPORT  GPIOG_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        GPIOH_Handler
;                        PROC
;                        EXPORT  GPIOH_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        UART2_Handler
;                        PROC
;                        EXPORT  UART2_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        SSI1_Handler
;                        PROC
;                        EXPORT  SSI1_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER3A_Handler
;                        PROC
;                        EXPORT  TIMER3A_Handler [WEAK]
;                        B       .
;                        ENDP
;        
;        TIMER3B_Handler
;                        PROC
;                        EXPORT  TIMER3B_Handler [WEAK]
;                        B       .
;                        ENDP
;******************************************************************************
;
; This is the code that gets called when the processor receives a NMI.  This
; simply enters an infinite loop, preserving the system state for examination
; by a debugger.
;
;******************************************************************************
NmiSR
        B       NmiSR

;******************************************************************************
;
; This is the code that gets called when the processor receives a fault
; interrupt.  This simply enters an infinite loop, preserving the system state
; for examination by a debugger.
;
;******************************************************************************
FaultISR
        B       FaultISR

;******************************************************************************
;
; This is the code that gets called when the processor receives an unexpected
; interrupt.  This simply enters an infinite loop, preserving the system state
; for examination by a debugger.
;
;******************************************************************************
IntDefaultHandler
        B       IntDefaultHandler

;******************************************************************************
;
; Make sure the end of this section is aligned.
;
;******************************************************************************
        ALIGN ;bu align fazla olabilir
;******************************************************************************
;
; The function expected of the C library startup code for defining the stack
; and heap memory locations.  For the C library version of the startup code,
; provide this function so that the C library initialization code can find out
; the location of the stack and heap.
;
;******************************************************************************

        IF      :DEF:__MICROLIB

        EXPORT  __initial_sp
        EXPORT  __heap_base
        EXPORT  __heap_limit

        ELSE

                IMPORT  __use_two_region_memory
                EXPORT  __user_initial_stackheap
__user_initial_stackheap

                LDR     R0, =  Heap_Mem
                LDR     R1, =(Stack_Mem + Stack_Size)
                LDR     R2, = (Heap_Mem +  Heap_Size)
                LDR     R3, = Stack_Mem
                BX      LR
;******************************************************************************
;
; Make sure the end of this section is aligned.
;
;******************************************************************************

                ALIGN

                ENDIF
;******************************************************************************
;
; Tell the assembler that we're done.
;
;******************************************************************************
        END
